{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3c709ba3-404b-4369-8a7c-88e54d3bfc08",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "usage: ipykernel_launcher.py [-h] [--csv CSV] [--fallback FALLBACK] [--start START] [--end END] [--json-only]\n",
      "ipykernel_launcher.py: error: unrecognized arguments: -f C:\\Users\\alswn\\AppData\\Roaming\\jupyter\\runtime\\kernel-04c601e4-ac5e-492f-85c0-247e7a0495c9.json\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "2",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m 2\n"
     ]
    }
   ],
   "source": [
    "# === 지역별 Top(건수/금액)만 출력 (JSON 전용 옵션 포함) ===\n",
    "import os, sys, json\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "import argparse\n",
    "\n",
    "def read_smart(p):\n",
    "    if p is None:\n",
    "        return None\n",
    "    for enc in (\"cp949\", \"utf-8\"):\n",
    "        try:\n",
    "            return pd.read_csv(p, encoding=enc)\n",
    "        except Exception:\n",
    "            pass\n",
    "    return None\n",
    "\n",
    "def top1_by(df_rank, col):\n",
    "    if df_rank is None or df_rank.empty:\n",
    "        return None\n",
    "    row = df_rank.sort_values(col, ascending=False).iloc[0]\n",
    "    return {\"시군구명\": row[\"시군구명\"], col: int(row[col])}\n",
    "\n",
    "def main():\n",
    "    parser = argparse.ArgumentParser()\n",
    "    parser.add_argument(\"--csv\", default=os.getenv(\"TOPDATA_CSV\", r\"C:\\Users\\alswn\\Downloads\\TOTAL_BC1_MM_CCND_CUST_CRTR_CCND_CSPT_SGG_MG.csv\"))\n",
    "    parser.add_argument(\"--fallback\", default=os.getenv(\"TOPDATA_FALLBACK\", \"/mnt/data/TOTAL_BC1_MM_CCND_CSPT_SGG_MG.csv\"))\n",
    "    parser.add_argument(\"--start\", default=os.getenv(\"TOPDATA_START\", \"2019-01-01\"))\n",
    "    parser.add_argument(\"--end\",   default=os.getenv(\"TOPDATA_END\",   \"2023-10-31\"))\n",
    "    parser.add_argument(\"--json-only\", action=\"store_true\", help=\"사람이 읽는 로그 없이 JSON만 stdout으로 출력\")\n",
    "    args = parser.parse_args()\n",
    "\n",
    "    df = read_smart(args.csv)\n",
    "    if df is None or df.empty:\n",
    "        df = read_smart(args.fallback)\n",
    "    assert df is not None and not df.empty, \"CSV를 읽지 못했습니다.\"\n",
    "\n",
    "    need = {\"기준연월\",\"시군구명\",\"전체이용건수\",\"전체이용금액\"}\n",
    "    missing = need - set(df.columns)\n",
    "    assert not missing, f\"필수 컬럼 누락: {missing}\"\n",
    "\n",
    "    df = df.dropna(subset=list(need)).copy()\n",
    "    df[\"기준연월\"] = df[\"기준연월\"].astype(int)\n",
    "    df[\"ym\"] = pd.to_datetime(df[\"기준연월\"].astype(str), format=\"%Y%m\")\n",
    "\n",
    "    # 기간 필터\n",
    "    df = df[(df[\"ym\"] >= args.start) & (df[\"ym\"] <= args.end)].copy()\n",
    "    latest = df[\"ym\"].max()\n",
    "\n",
    "    # 집계\n",
    "    total_rank = (\n",
    "        df.groupby(\"시군구명\")[[\"전체이용건수\",\"전체이용금액\"]]\n",
    "          .sum().reset_index()\n",
    "    )\n",
    "    latest_rank = (\n",
    "        df[df[\"ym\"] == latest]\n",
    "          .groupby(\"시군구명\")[[\"전체이용건수\",\"전체이용금액\"]]\n",
    "          .sum().reset_index()\n",
    "    )\n",
    "\n",
    "    total_top_count  = top1_by(total_rank,  \"전체이용건수\")\n",
    "    total_top_amount = top1_by(total_rank,  \"전체이용금액\")\n",
    "    latest_top_count  = top1_by(latest_rank, \"전체이용건수\")\n",
    "    latest_top_amount = top1_by(latest_rank, \"전체이용금액\")\n",
    "\n",
    "    result = {\n",
    "        \"period\": {\n",
    "            \"start\": df[\"ym\"].min().strftime(\"%Y-%m\"),\n",
    "            \"end\": df[\"ym\"].max().strftime(\"%Y-%m\"),\n",
    "            \"latest\": latest.strftime(\"%Y-%m\"),\n",
    "        },\n",
    "        \"total\": {\n",
    "            \"top_count\":  {\"name\": total_top_count[\"시군구명\"],  \"count\": int(total_top_count[\"전체이용건수\"])},\n",
    "            \"top_amount\": {\"name\": total_top_amount[\"시군구명\"], \"amount\": int(total_top_amount[\"전체이용금액\"])},\n",
    "        },\n",
    "        \"latest\": {\n",
    "            \"top_count\":  {\"name\": latest_top_count[\"시군구명\"],  \"count\": int(latest_top_count[\"전체이용건수\"])},\n",
    "            \"top_amount\": {\"name\": latest_top_amount[\"시군구명\"], \"amount\": int(latest_top_amount[\"전체이용금액\"])},\n",
    "        }\n",
    "    }\n",
    "\n",
    "    if args.json_only or os.getenv(\"TOPDATA_JSON_ONLY\", \"0\") == \"1\":\n",
    "        # ✅ Spring에서 파싱 가능한 순수 JSON 한 줄 출력\n",
    "        sys.stdout.write(json.dumps(result, ensure_ascii=False))\n",
    "    else:\n",
    "        # 사람 눈으로도 확인하고 싶을 때\n",
    "        print(f\"[기간] {result['period']['start']} ~ {result['period']['end']}\")\n",
    "        print(\"\\n[전체기간 Top1]\")\n",
    "        print(f\"- 거래량(건수) 1위: {result['total']['top_count']['name']}  / {result['total']['top_count']['count']:,} 건\")\n",
    "        print(f\"- 거래금액 1위:   {result['total']['top_amount']['name']}  / {result['total']['top_amount']['amount']:,} 원\")\n",
    "        print(f\"\\n[최신월 Top1] ({result['period']['latest']})\")\n",
    "        print(f\"- 거래량(건수) 1위: {result['latest']['top_count']['name']}  / {result['latest']['top_count']['count']:,} 건\")\n",
    "        print(f\"- 거래금액 1위:   {result['latest']['top_amount']['name']}  / {result['latest']['top_amount']['amount']:,} 원\")\n",
    "        print(\"\\n--- JSON ---\")\n",
    "        print(json.dumps(result, ensure_ascii=False))\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e121463-e0ba-45ee-8e7f-9808095dd9a1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e308234d-b1cb-47e2-999a-8b0a057ac4f2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
