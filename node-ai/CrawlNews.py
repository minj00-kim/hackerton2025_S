{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1abb0e1-f01b-4534-ac3a-09a6b0c7c39b",
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install feedparser trafilatura beautifulsoup4 requests dateparser openai httpx\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f64dbc2-7782-4dea-98dc-f8ca04a851fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "# 청년창업/지원금 크롤링 → 본문 추출 → 신청기간/대상/금액 추출(정규식) → (옵션) GPT 요약\n",
    "\n",
    "import os, re, time\n",
    "from pathlib import Path\n",
    "from datetime import datetime\n",
    "import json\n",
    "import requests, feedparser\n",
    "import pandas as pd\n",
    "from urllib.parse import quote_plus\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# ====== 설정 ======\n",
    "QUERY = \"청년창업 지원금\"\n",
    "MAX_ITEMS = 40\n",
    "MAX_SUMMARY = 10          # 요약 최대 N개(요금/속도 고려)\n",
    "DO_SUMMARIZE = True\n",
    "LANG, COUNTRY = \"ko\", \"KR\"\n",
    "\n",
    "SAVE_DIR = Path(\"exports/crawl_youth_grants_regex\") / datetime.now().strftime(\"%Y%m%d_%H%M\")\n",
    "SAVE_DIR.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n",
    "OPENAI_MODEL = \"gpt-5\"  # 필요시 변경\n",
    "\n",
    "HEADERS = {\n",
    "    \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \"\n",
    "                 \"(KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36\"\n",
    "}\n",
    "\n",
    "# ====== 유틸: Google News RSS ======\n",
    "def google_news_rss_url(query, hl=\"ko\", gl=\"KR\", ceid=\"KR:ko\"):\n",
    "    return f\"https://news.google.com/rss/search?q={quote_plus(query)}&hl={hl}&gl={gl}&ceid={ceid}\"\n",
    "\n",
    "RSS_URL = google_news_rss_url(QUERY, LANG, COUNTRY, f\"{COUNTRY}:{LANG}\")\n",
    "print(\"[RSS]\", RSS_URL)\n",
    "\n",
    "# ====== 본문 추출 ======\n",
    "def fetch_html(url, timeout=12):\n",
    "    try:\n",
    "        r = requests.get(url, headers=HEADERS, timeout=timeout)\n",
    "        if r.ok:\n",
    "            return r.text\n",
    "    except Exception:\n",
    "        pass\n",
    "    return None\n",
    "\n",
    "def extract_text(html: str) -> str | None:\n",
    "    # 1) trafilatura 시도\n",
    "    try:\n",
    "        import trafilatura\n",
    "        txt = trafilatura.extract(html, include_comments=False, include_tables=False)\n",
    "        if txt and len(txt.strip()) >= 200:\n",
    "            return txt\n",
    "    except Exception:\n",
    "        pass\n",
    "    # 2) BeautifulSoup fallback\n",
    "    try:\n",
    "        soup = BeautifulSoup(html, \"html.parser\")\n",
    "        for bad in soup([\"script\",\"style\",\"noscript\",\"header\",\"footer\",\"aside\",\"nav\"]):\n",
    "            bad.decompose()\n",
    "        text = \"\\n\".join(p.get_text(\" \", strip=True) for p in soup.find_all([\"p\",\"article\",\"section\",\"div\"]))\n",
    "        return text if len(text.strip()) >= 200 else None\n",
    "    except Exception:\n",
    "        return None\n",
    "\n",
    "# ====== 날짜 파싱(한국어) ======\n",
    "# dateparser가 있으면 활용, 없으면 심플 파서\n",
    "try:\n",
    "    import dateparser\n",
    "except Exception:\n",
    "    dateparser = None\n",
    "\n",
    "def _norm_ymd(y, m, d, fallback_year=None):\n",
    "    try:\n",
    "        y = int(y) if y else int(fallback_year) if fallback_year else None\n",
    "        m = int(m) if m else 1\n",
    "        d = int(d) if d else 1\n",
    "        if y is None:  # 연도 없으면 실패\n",
    "            return None\n",
    "        return f\"{y:04d}-{m:02d}-{d:02d}\"\n",
    "    except Exception:\n",
    "        return None\n",
    "\n",
    "def parse_korean_date_span(text: str):\n",
    "    \"\"\"\n",
    "    신청/접수 기간을 텍스트에서 찾아 (start, end) ISO-8601로 반환.\n",
    "    - \"2023.10.01~2023.10.20\", \"2023년 10월 1일 ~ 10월 20일\",\n",
    "      \"10.1(월)부터 10.20(금)까지\", \"접수 2023-10-01 ~ 10-20\" 등\n",
    "    \"\"\"\n",
    "    text = re.sub(r\"\\s+\", \" \", text)\n",
    "    # 1) 년-월-일 양쪽 모두 있는 경우 (tilde 또는 '부터~까지')\n",
    "    pat_full = re.compile(\n",
    "        r\"(?P<y1>\\d{4})[.\\-/년\\s]*?(?P<m1>\\d{1,2})[.\\-/월\\s]*?(?P<d1>\\d{1,2})?일?\"\n",
    "        r\"\\s*(?:~|–|-|부터)\\s*\"\n",
    "        r\"(?P<y2>\\d{4})?[.\\-/년\\s]*?(?P<m2>\\d{1,2})[.\\-/월\\s]*?(?P<d2>\\d{1,2})?일?(?:\\s*까지)?\"\n",
    "    )\n",
    "    m = pat_full.search(text)\n",
    "    if m:\n",
    "        y1, m1, d1 = m.group(\"y1\",\"m1\",\"d1\")\n",
    "        y2, m2, d2 = m.group(\"y2\",\"m2\",\"d2\")\n",
    "        if not y2: y2 = y1\n",
    "        s = _norm_ymd(y1,m1,d1, y1); e = _norm_ymd(y2,m2,d2, y1)\n",
    "        if s and e: return s, e\n",
    "\n",
    "    # 2) 앞 날짜에 연도, 뒤 날짜는 월일만 있는 경우 (예: 2023.10.1 ~ 10.20)\n",
    "    pat_half = re.compile(\n",
    "        r\"(?P<y1>\\d{4})[.\\-/년\\s]*?(?P<m1>\\d{1,2})[.\\-/월\\s]*?(?P<d1>\\d{1,2})?일?\"\n",
    "        r\"\\s*(?:~|–|-|부터)\\s*\"\n",
    "        r\"(?P<m2>\\d{1,2})[.\\-/월\\s]*?(?P<d2>\\d{1,2})?일?(?:\\s*까지)?\"\n",
    "    )\n",
    "    m = pat_half.search(text)\n",
    "    if m:\n",
    "        y1, m1, d1 = m.group(\"y1\",\"m1\",\"d1\")\n",
    "        m2, d2     = m.group(\"m2\",\"d2\")\n",
    "        s = _norm_ymd(y1,m1,d1, y1); e = _norm_ymd(y1,m2,d2, y1)\n",
    "        if s and e: return s, e\n",
    "\n",
    "    # 3) 'YYYY.MM.DD 까지'만 있는 경우(마감일)\n",
    "    pat_until = re.compile(\n",
    "        r\"(?P<y>\\d{4})[.\\-/년\\s]*?(?P<m>\\d{1,2})[.\\-/월\\s]*?(?P<d>\\d{1,2})?일?\\s*까지\"\n",
    "    )\n",
    "    m = pat_until.search(text)\n",
    "    if m:\n",
    "        e = _norm_ymd(m.group(\"y\"), m.group(\"m\"), m.group(\"d\"), m.group(\"y\"))\n",
    "        return None, e\n",
    "\n",
    "    # 4) dateparser 시도(문장 내 '신청기간/접수기간' 근처)\n",
    "    if dateparser:\n",
    "        ctx = \"\"\n",
    "        m = re.search(r\"(신청기간|접수기간|모집기간|접수)\\s*[:\\-]?\\s*(.{0,80})\", text)\n",
    "        if m:\n",
    "            ctx = m.group(0)\n",
    "        dt = dateparser.search.search_dates(ctx or text, languages=[\"ko\"])\n",
    "        # 너무 모호하면 패스\n",
    "        if dt and len(dt)>=1:\n",
    "            # 한두 개만 잡히면 start/end 구분 어렵지만 최대 2개까지 시도\n",
    "            vals = [d[1] for d in dt[:2]]\n",
    "            if len(vals)==2:\n",
    "                s = vals[0].strftime(\"%Y-%m-%d\"); e = vals[1].strftime(\"%Y-%m-%d\")\n",
    "                return s, e\n",
    "\n",
    "    return None, None\n",
    "\n",
    "# ====== 금액(원화) 추출 ======\n",
    "# 케이스: \"최대 3천만원\", \"1억 원\", \"2.5억원\", \"500만원\", \"5,000만 원\"\n",
    "UNIT_MAP = {\n",
    "    \"억원\": 100_000_000, \"억\": 100_000_000,\n",
    "    \"천만\": 10_000_000,  \"백만\": 1_000_000, \"십만\": 100_000,\n",
    "    \"만원\": 10_000,      \"만\": 10_000,\n",
    "    \"원\": 1,\n",
    "}\n",
    "_money_re = re.compile(\n",
    "    r\"(?P<prefix>최대|최고|한도|약|총|총액|1인당|팀당)?\\s*\"\n",
    "    r\"(?P<num>\\d{1,3}(?:,\\d{3})+|\\d+(?:\\.\\d+)?)\\s*\"\n",
    "    r\"(?P<unit>억원|억|천만|백만|십만|만원|만|원)\"\n",
    ")\n",
    "def parse_money_to_krw(num_str: str, unit: str) -> int:\n",
    "    num = float(num_str.replace(\",\",\"\"))\n",
    "    mul = UNIT_MAP.get(unit, 1)\n",
    "    return int(round(num * mul))\n",
    "\n",
    "def extract_amounts(text: str, top_k=3):\n",
    "    found = []\n",
    "    for m in _money_re.finditer(text):\n",
    "        val = parse_money_to_krw(m.group(\"num\"), m.group(\"unit\"))\n",
    "        found.append({\n",
    "            \"text\": m.group(0).strip(),\n",
    "            \"value_krw\": val\n",
    "        })\n",
    "    # 금액 큰 순으로 상위 N개\n",
    "    found.sort(key=lambda x: x[\"value_krw\"], reverse=True)\n",
    "    return found[:top_k]\n",
    "\n",
    "# ====== 대상(자격) 추출 ======\n",
    "TARGET_PATTERNS = [\n",
    "    r\"청년(?:창업자| 예비창업자| 기업가| 대상| 지원대상)?\",\n",
    "    r\"예비창업자\",\n",
    "    r\"초기창업자\",\n",
    "    r\"대학생|대학원생|재학생|졸업예정자\",\n",
    "    r\"만\\s*\\d{1,2}\\s*세(?:\\s*(?:이하|이상|초과|미만))?\",\n",
    "    r\"\\d{2}\\s*대\",                # 20대, 30대 등\n",
    "    r\"\\d+\\s*년\\s*이내\\s*창업\",     # 창업 3년 이내\n",
    "    r\"사업자등록\\s*\\d+\\s*년\\s*이내\",\n",
    "    r\"소상공인|중소기업|법인|개인사업자|팀당|개인\",\n",
    "]\n",
    "_target_re = re.compile(\"|\".join(TARGET_PATTERNS))\n",
    "\n",
    "def extract_targets(text: str, top_k=8):\n",
    "    hits = _target_re.findall(text)\n",
    "    # 정제 & 중복 제거\n",
    "    cleaned = []\n",
    "    for h in hits:\n",
    "        if isinstance(h, tuple):\n",
    "            h = [x for x in h if x]\n",
    "            if not h: continue\n",
    "            h = h[0]\n",
    "        h = re.sub(r\"\\s+\", \" \", h.strip())\n",
    "        if h and h not in cleaned:\n",
    "            cleaned.append(h)\n",
    "    return cleaned[:top_k]\n",
    "\n",
    "# ====== GPT 요약 ======\n",
    "def summarize_gpt(text: str) -> str:\n",
    "    if not DO_SUMMARIZE or not OPENAI_API_KEY:\n",
    "        return \"\"\n",
    "    text = text[:6000]  # 비용/속도\n",
    "    try:\n",
    "        from openai import OpenAI\n",
    "        client = OpenAI(api_key=OPENAI_API_KEY)\n",
    "        prompt = (\n",
    "            \"아래 한국어 기사를 4~6줄 bullet로 요약하세요. \"\n",
    "            \"지원대상, 금액, 기간(신청/접수), 지역/기관이 있다면 포함하세요.\\n\\n\"\n",
    "            + text\n",
    "        )\n",
    "        resp = client.responses.create(model=OPENAI_MODEL, input=prompt, temperature=0.2)\n",
    "        return resp.output_text.strip()\n",
    "    except Exception as e:\n",
    "        return f\"(요약 오류: {e})\"\n",
    "\n",
    "# ====== 실행: RSS → 본문 → 추출 ======\n",
    "feed = feedparser.parse(RSS_URL)\n",
    "entries = feed.entries[:MAX_ITEMS]\n",
    "rows = []\n",
    "\n",
    "for i, e in enumerate(entries, start=1):\n",
    "    title = e.title\n",
    "    link  = e.link\n",
    "    pub   = getattr(e, \"published\", \"\")\n",
    "    print(f\"[{i:02d}] {title}\")\n",
    "\n",
    "    html = fetch_html(link)\n",
    "    text = extract_text(html) or \"\"\n",
    "    s, e_ = parse_korean_date_span(text)\n",
    "    amts  = extract_amounts(text, top_k=5)\n",
    "    tgts  = extract_targets(text, top_k=10)\n",
    "    summ  = summarize_gpt(text) if i <= MAX_SUMMARY else \"\"\n",
    "\n",
    "    rows.append({\n",
    "        \"rank\": i,\n",
    "        \"query\": QUERY,\n",
    "        \"title\": title,\n",
    "        \"link\": link,\n",
    "        \"published\": pub,\n",
    "        \"period_start\": s,\n",
    "        \"period_end\": e_,\n",
    "        \"amount_top_krw\": amts[0][\"value_krw\"] if amts else None,\n",
    "        \"amount_texts\": [a[\"text\"] for a in amts],\n",
    "        \"targets\": tgts,\n",
    "        \"summary_gpt\": summ\n",
    "    })\n",
    "    time.sleep(0.7)\n",
    "\n",
    "df = pd.DataFrame(rows)\n",
    "csv_path = SAVE_DIR / \"youth_grants_extracted.csv\"\n",
    "json_path = SAVE_DIR / \"youth_grants_extracted.json\"\n",
    "df.to_csv(csv_path, index=False, encoding=\"utf-8-sig\")\n",
    "df.to_json(json_path, orient=\"records\", force_ascii=False, indent=2)\n",
    "print(\"저장:\", csv_path.resolve())\n",
    "print(\"저장:\", json_path.resolve())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86d5cc60-6c41-4059-9886-90caac702ef6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
